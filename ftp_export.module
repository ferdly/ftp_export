<?php

/**
 * DRUSH Below
 */
function _drush_execute_ftpx($option_array = array()) {
  $buffer = '';
  require_once 'src/ftp_export_config.inc';
  $ftp_export_config_these->execute_ftp();
  if ($option_array['dev'] === TRUE) {
    $buffer .= print_r($ftp_export_config_these, TRUE);
  }else{
    $buffer .= $ftp_export_config_these->response;
  }
  return $buffer;

    // $test_output = print_r($ftp_export_config_these, TRUE);
    $test_output_array = array(
      'Feather'=>'Named for his Tail',
      'Marcy'=>'Named for Mt. Marcy in the Adirondacks',
      'Chester'=>'Named for Chester Creek which runs through Duluth',
      'Marais'=>'Named for Grand Marais on the North Shore of Lake Superior',
    );
    $steps = array();
    //['PERCENT_COMPLETE']  80-> ready to test, 90->tested but
    $steps['1.0']['SUBJECT'] = 'instantiate object';
    $steps['1.0']['PERCENT_COMPLETE'] = 90;
    //$this MEANS $ftp_export_instance
    $steps['2.0']['SUBJECT'] = 'generate file(s) to transfer BY programatically, but not real data';
    $steps['2.0']['BODY'] = 'Faux Content, but sufficient for testing the FTP part.';
    $steps['2.0']['PERCENT_COMPLETE'] = 80;

    $steps['2.1']['SUBJECT'] = 'generate file(s) to transfer BY $this->file_generation_callback True Views Export';
    $steps['2.1']['BODY'] = 'Big Hairy Task';
    $steps['2.1']['PERCENT_COMPLETE'] = 10;

    $steps['3.0']['SUBJECT'] = 'FTP file(s) with WatchDog via $this->response';

    $steps['4.0']['SUBJECT'] = 'Archive Local Files';
    $steps['4.0']['BODY'] = 'Implicit in Step 2, see Pruning step for managing volume of archive';
    $steps['4.0']['PERCENT_COMPLETE'] = 100;

    $steps['5.0']['SUBJECT'] = 'Prune Email Local Files if COUNT > 180 days';//as part of config
    $steps['6.0']['SUBJECT'] = 'Prune Email DEV Local Files if COUNT > 360 days';//as part of config
    $steps['7.0']['SUBJECT'] = 'Email DEV on ANY EERROR determined by $this->response != SSUCCESS';
    $steps['8.0']['SUBJECT'] = 'Make Steps Cascade Backward';
    return print_r($test_output_array, TRUE);
    // $test_output = print_r($test_output_array, TRUE);
  // drush_print($test_output);
}

function ftp_export_drush__custom () {
  $buffer = '';
  $boolean_option_array = array('dev');
  $custom_option_array = array('step');
  $option_array = _gather_option_array($boolean_option_array, $custom_option_array);

  $buffer .= _drush_execute_ftpx($option_array);
  return $buffer;

  $function_string = ' Function: ' . __FUNCTION__ . ';';
  $boolean_option_array = array('dev');
  $custom_option_array = array('step');
  $option_array = _gather_option_array($boolean_option_array, $custom_option_array);
  // $buffer .= $function_string;
  // $buffer .= ' Options: ' . print_r($option_array, TRUE);
  // return $buffer; //un-comment this and two above to peek into $options
  foreach ($option_array as $key => $value) {
    $$key = $value;
  }
  $dev_string = ' DEV: ';
  $dev_string .= $dev ? 'True':'False';
  $dev_string .= ';';
  $buffer .= $dev_string;
  $step_string = ' STEP: ' . $step . ';';
  $buffer .= $step_string;
  $buffer .= $function_string;
  require_once 'src/ftp_export_config.inc';
  if ($dev === TRUE) {
    $buffer .= print_r($ftp_export_config_these, TRUE);
  }

  return $buffer;
}

function ftp_export_drush__combo () {
  $buffer = '';

  $function_string = ' Function: ' . __FUNCTION__ . ';';
  $boolean_option_array = array('dev');
  $custom_option_array = array('step');
  $option_array = _gather_option_array($boolean_option_array, $custom_option_array);
  $buffer .= $function_string;
  $buffer .= ' Options: ' . print_r($option_array, TRUE);
  return $buffer; //un-comment this and two above to peek into $options
  foreach ($option_array as $key => $value) {
    $$key = $value;
  }
  $dev_string = ' DEV: ';
  $dev_string .= $dev ? 'True':'False';
  $dev_string .= ';';
  $buffer .= $dev_string;
  $step_string = ' STEP: ' . $step . ';';
  $buffer .= $step_string;
  $buffer .= $function_string;

  return $buffer;
}

function ftp_export_drush__core () {
  $buffer = '';

  $function_string = ' Function: ' . __FUNCTION__ . ';';
  $boolean_option_array = array('dev');
  $custom_option_array = array('step');
  $option_array = _gather_option_array($boolean_option_array, $custom_option_array);
  // $buffer .= $function_string;
  // $buffer .= ' Options: ' . print_r($option_array, TRUE);
  // return $buffer; //un-comment this and two above to peek into $options
  foreach ($option_array as $key => $value) {
    $$key = $value;
  }
  $dev_string = ' DEV: ';
  $dev_string .= $dev ? 'True':'False';
  $dev_string .= ';';
  $buffer .= $dev_string;
  $step_string = ' STEP: ' . $step . ';';
  $buffer .= $step_string;
  $buffer .= $function_string;

  return $buffer;
}

function _gather_option_array($boolean_option_array = array(), $custom_option_array = array()) {
  $option_array = array();
  _gather_boolean_options($option_array, $boolean_option_array);
  _gather_custom_options($option_array, $custom_option_array);
  $option_array['test_option01'] = 'Can be used as a way to set a \'preference\' that can later be coded *as* an option';
  return $option_array;
}

function _gather_boolean_options(&$option_array, $boolean_option_array = array()) {
  $string_too = TRUE;// comment out line to turn off
  $string_too = $string_too === TRUE ? TRUE : FALSE;
  if (!is_array($option_array)) {
    return;
  }
  if (empty($boolean_option_array)) {
    return;
  }
  foreach ($boolean_option_array as $index => $option) {
    // $option_array[$option] = drush_get_option($option, FALSE);
    $value = drush_get_option($option, FALSE);
    $value = $value === TRUE ? TRUE : FALSE;
    $option_array[$option] = $value;
    if ($string_too === TRUE) {
      #\_ because 'drush_print' and/or 'print_r' does NOT return FALSE as such
      #  \_ also TRUE response '1' is ambiguous as far as '=='' vs '===''
      $option = $option . '_string';
      $value = $value === TRUE ? 'TTRUE' : 'FFALSE';
          $option_array[$option] = $value;
    }
  }
  return $option_array;
}

function _gather_custom_options(&$option_array, $custom_option_array = array()) {
  if (!is_array($option_array)) {
    return;
  }
  if (empty($custom_option_array)) {
    return;
  }
  foreach ($custom_option_array as $index => $option) {
    // each $option as individual criteria
    $is_valid = FALSE;
    if ($option == 'step') {
      $value = drush_get_option($option, 1);
      $value = ctype_digit($value) ? $value : 1;
      $is_valid = TRUE;
      #\_ Example, validate that it return alpha non empty else empty string
    }
    if ($is_valid) {
      $option_array[$option] = $value;
    }
  }
  return $option_array;
}

/**
 * BELOW IS ORIGINAL
 * local source => /Users/bradthorntonlowry/Documents/BradProfessional/KnowledgeBase/Drupal/Views/views_export/pages/pages_task/task_ftp_results/PokeAroundInModules/commerce_order_ftp_export
 *
 * - will Remove 'commerce_' prefex when rewritten for this purpose.
 */

/**
 * RE-ORDER Updated for ftp_export below
 * \_ in order of their being re-tooled
 */

/**
 * Implements hook_rules_action_info().
 *
 * adds a rule action to export and upload an order and set status to 'processing'
 */
function ftp_export_rules_action_info() {
  $actions = array();

  $actions['ftp_export_upload'] = array(
    'label' => t('Export/Upload This'),
    'group' => t('FTP Export This'),
    'callbacks' => array(
      'execute' => 'ftp_export_upload',
    ),
  );

  return $actions;
}

/**
 * exports/uploads an order and updates status to Processing
 * Rules action
 */
function ftp_export_upload() {
  $message = 'BEGIN: ftp_export_upload()';
  watchdog('ftp_export', $message);
  drupal_set_message($message);

  require_once 'src/ftp_export_config.inc';
  // $ftp_export_config_these->execute_ftp($ftp_execution_key_override);

  /**
   * @todo figure out how to pass $ftp_execution_key_override
   */

  $ftp_export_config_these->execute_ftp();

  $message = 'END: ftp_export_upload()';
  watchdog('ftp_export', $message);
  return;
}


/**
 * RE-ORDER Un-Changed Below
 */
/**
 * Implements hook_menu().
 */
function commerce_order_ftp_export_menu() {

  $items['admin/commerce/config/order/export/ftp'] = array(
    'title' => 'FTP Export',
    'description' => 'Order FTP Export Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_ftp_export_config'),
    'access arguments' => array('administer commerce_order entities'),
  );

  return $items;
}

/**
 * Order FTP Export configuration form.
 */
function commerce_order_ftp_export_config() {
  $form['order_ftp_export_ftp_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#description' => t('Enter the host of the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_host'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Enter the username used to connect to the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_username'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter the password used to connect to the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_password'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#description' => t('Enter the port used to connect to the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_port'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory'),
    '#description' => t('Enter the directory (path) where exported order xml files should be placed on the FTP server. Year/month directories will be created inside this directory.'),
    '#default_value' => variable_get('order_ftp_export_ftp_directory'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_validate().
 *
 * Validate FTP Server settings
 */
function commerce_order_ftp_export_config_validate($form, &$form_state) {
  //get the values from the form
  $ftp_server = check_plain($form_state['values']['order_ftp_export_ftp_host']);
  $ftp_uname = check_plain($form_state['values']['order_ftp_export_ftp_username']);
  $ftp_pass = check_plain($form_state['values']['order_ftp_export_ftp_password']);
  $ftp_port = check_plain($form_state['values']['order_ftp_export_ftp_port']);
  $ftp_directory = check_plain($form_state['values']['order_ftp_export_ftp_directory']);

  //get the parts of the directory path
  $ftp_directory_array = explode('/', $ftp_directory);

  //try to connect to the ftp server
  if (!$fp = ftp_connect($ftp_server, $ftp_port, 30)) {
    form_set_error('order_ftp_export_ftp_host', t('Connection failed. Check to make sure the FTP host is correct.'));
    return;
  }
  //try to login to the ftp server
  if (!ftp_login($fp, $ftp_uname, $ftp_pass)) {
    form_set_error('order_ftp_export_ftp_username][order_ftp_export_ftp_password', t('Login failed. Check your username and password and try again.'));
    return;
  }
  //try to set mode to passive
  if (!ftp_pasv($fp, TRUE)) {
    form_set_error('', t('Unable to set mode to passive.'));
  }

  //try to navigate to specified directory (or create it)
  foreach ($ftp_directory_array as $fd) {
    if (!empty($fd)) {
      if (!@ftp_chdir($fp, $fd)) {
        if (!@ftp_mkdir($fp, $fd)) {
          form_set_error('order_ftp_export_ftp_directory', t('Unable to make directory: ' . $fd . ' Try changing the directory path to something else.'));
        }
        if (!@ftp_chdir($fp, $fd)) {
          form_set_error('order_ftp_export_ftp_directory', t('Unable to change directory to: ' . $fd . 'Are you sure this directory exisists on the server?'));
        }
      }
    }
  }
}


/**
 * Implements hook_commerce_order_update().
 *
 */
/**
function commerce_order_ftp_export_commerce_order_update() {
  // was going to try to check for status = Pending to do the export
  // instead, a rule is created below
}
 */


/**
 * exports an order xml
 * returns: xml as string
 */
function commerce_order_ftp_export_export_order($order) {
  // get full order details (line items, products, customer profiles, etc.)
  $vars = commerce_order_ftp_export_get_full_order_data($order);

  //render the xml
  return theme('commerce_order_ftp_export', $vars);
}


/**
 * get full order details (line items, products, customer profiles, etc.)
 * returns:
 *   Array (
 *     [order] => stdClass Object
 *     [line_items] => Array indexed by line_item_id
 *     [products] => Array indexed by product_id
 *     [profiles] => Array indexed by profile_id
 *     [user] => stdClass Object
 *   )
 */
function commerce_order_ftp_export_get_full_order_data($order) {
  $vars = array();

  //add order to output
  $vars['order'] = $order;

  //look up the line items
  $li_ids = array();
  foreach ($order->commerce_line_items['und'] as $li) {
    $li_ids[] = $li['line_item_id'];
  }
  $lis = commerce_line_item_load_multiple($li_ids);
  //add line items to output
  $vars['line_items'] = $lis;

  //look up the products
  $product_ids = array();
  foreach ($lis as $li) {
    foreach ($li->commerce_product['und'] as $prod_ref) {
      $product_ids[] = $prod_ref['product_id'];
    }
  }
  $products = commerce_product_load_multiple($product_ids);
  //add products to output
  $vars['products'] = $products;

  //look up customer profiles
  $profile_ids = array();
  foreach ($order->commerce_customer_billing['und'] as $profile_ref) {
    $profile_ids[] = $profile_ref['profile_id'];
  }
  $profiles = commerce_customer_profile_load_multiple($profile_ids);
  //add customer profiles to output
  $vars['profiles'] = $profiles;

  //add user to output
  $vars['user'] = user_load($order->uid['und']);

  return $vars;
}
